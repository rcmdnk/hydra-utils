[project]
name = "hydra-utils"
version = "0.2.0"
description = "Utilities for hydra-core library"
authors = [ { name = "rcmdnk", email = "rcmdnk@gmail.com" } ]
readme = "README.md"
license = "apache-2.0"
keywords = ["hydra", "hydra-core", "hydra-utils"]
classifiers = []
requires-python = ">=3.10,<3.14"
dependencies = [
    "hydra-core>=1.3.2",
    "joblib>=1.4.2",
]

[dependency-groups]
dev = [
    "tomli >= 2.0.1; python_version < '3.11'",
    "pytest >= 8.0.0",
    "pytest-cov >= 5.0.0",
    "pytest-xdist >= 3.3.1",
    "pytest-benchmark >= 4.0.0",
    "pyproject-pre-commit[ruff] >= 0.3.5",
    "gitpython >= 3.1.41",
    "types-pymysql>=1.1.0.20241103",
    "types-pyyaml>=6.0.12.20240917",
    "types-decorator>=5.1.8.20240310",
    "types-redis>=4.6.0.20241004",
    "types-six>=1.16.21.20241105",
]

[project.urls]
Repository = "https://github.com/rcmdnk/hydra-utils"
Homepage = "https://github.com/rcmdnk/hydra-utils"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
addopts = "-n auto"
testpaths = ["tests",]

[tool.ruff]
line-length = 79

[tool.ruff.lint]
# select = ["ALL"]
# select = ["E4", "E7", "E9", "F"]  # default, black compatible
select = [  # similar options to black, flake8 + plugins, isort etc...)
    #"E4",  # Import (comparable to black)
    #"E7",  # Indentation (comparable to black)
    #"E9",  # Blank line (comparable to black)
    "F",   # String (comparable to black)
    "I",   # Import order (comparable to isort)
    "S",   # flake8-bandit (comparable to bandit)
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",   # flake8-comprehensions
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "T20", # flake8-print
    "N", # pep8-naming
    "E", # pycodestyle
    "W", # pycodestyle
    "C90", # mccabe
]

ignore = [
    "E203", # Not PEP8 compliant and black insert space around slice: [Frequently Asked Questions - Black 22.12.0 documentation](https://black.readthedocs.io/en/stable/faq.html#why-are-flake8-s-e203-and-w503-violated)
    "E501", # Line too long. Disable it to allow long lines of comments and print lines which black allows.
#    "E704", # NOT in ruff. multiple statements on one line (def). This is inconsistent with black >= 24.1.1 (see ttps://github.com/psf/black/pull/3796)
#    "W503", # NOT in ruff. is the counter part of W504, which follows current PEP8: [Line break occurred before a binary operator (W503)](https://www.flake8rules.com/rules/W503.html)
    "D100", "D102", "D103", "D104", "D105", "D106", # Missing docstrings other than class (D101)
    "D401", # First line should be in imperative mood
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "D211", # `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`.
    "D213", # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`.
    "COM812", "D203", "ISC001", # The following rules may cause conflicts when used with the formatter: `COM812`, `D203`, `ISC001`. To avoid unexpected behavior, we recommend disabling these rules, either by removing them from the `select` or `extend-select` configuration, or adding them to the `ignore` configuration.
    "B905", # [*] `zip()` without an explicit `strict=` parameter
    "PD901", # Avoid using the generic variable name `df` for DataFrames
    "TID252", # Prefer absolute imports over relative imports from parent modules
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101", # Use of `assert` detected
    "DTZ001", # `datetime.datetime()` called without a `tzinfo` argument
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.mypy]
files = ["src/**/*.py"]
strict = true
warn_return_any = false
ignore_missing_imports = true
scripts_are_modules = true
install_types = true
non_interactive = true

[tool.numpydoc_validation]
checks = [
    "all",   # report on all checks, except the below
    "EX01",  # "No examples section found"
    "ES01",  # "No extended summary found"
    "SA01",  # "See Also section not found"
    "GL08",  # "The object does not have a docstring"
    "PR01",  # "Parameters {missing_params} not documented"
    "PR02",  # "Unknown parameters {unknown_params}"
    "RT01",  # "No Returns section found"
]
